@page "/"
@using DevExpressBlazorStarter.Data
@inject IJSRuntime JSRuntime;
@inject WeatherForecastService ForecastService

<DxTextBox NullText="Enter text to search" Text="@Filter" TextChanged="OnTextChanged"></DxTextBox>

<DxDataGrid Data="@Forecasts" 
            PageSize="5" 
            CssClass="my-grid" 
            ShowFilterRow="true" 
            HtmlDataCellDecoration="OnHtmlDataCellDecoration"
            ShowPager="false">
    <DxDataGridColumn Field="@nameof(WeatherForecast.Date)"></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(WeatherForecast.TemperatureC)"></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(WeatherForecast.TemperatureF)"></DxDataGridColumn>
    <DxDataGridComboBoxColumn Data="@WeatherForecastService.Summaries" Field="@nameof(WeatherForecast.Summary)"></DxDataGridComboBoxColumn>
</DxDataGrid>

@code { 
    public void OnTextChanged(string text) {
        Filter = text;
        text = text.ToLower();
        Forecasts = AllForecasts.Where(a => a.Summary.ToLower().Contains(text) || a.Date.ToString().ToLower().Contains(text) ||
            a.TemperatureC.ToString().ToLower().Contains(text) || a.TemperatureF.ToString().ToLower().Contains(text)).ToList();
        InvokeAsync(StateHasChanged);
        JSRuntime.InvokeVoidAsync("highlightFilteredCells", "my-grid", "filtered", Filter);
    }

    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<WeatherForecast> e) {
        if (e.FieldName == nameof(WeatherForecast.Date)) {
            if (e.DataItem.Date.ToString().Contains(Filter)) {
                e.CssClass = "filtered";
            }
        } else if (e.FieldName == nameof(WeatherForecast.TemperatureC)) {
            if (e.DataItem.TemperatureC.ToString().Contains(Filter)) {
                e.CssClass = "filtered";
            }
        } else if (e.FieldName == nameof(WeatherForecast.TemperatureF)) {
            if (e.DataItem.TemperatureF.ToString().Contains(Filter)) {
                e.CssClass = "filtered";
            }
        }
    }

    string Filter = string.Empty;
    List<WeatherForecast> Forecasts;
    List<WeatherForecast> AllForecasts;
    private WeatherForecast forecast;

    protected override async Task OnInitializedAsync() {
        AllForecasts = Forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
